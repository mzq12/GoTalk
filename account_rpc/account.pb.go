// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/account.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/account.proto
	pb/mangementSso.proto
	pb/sso.proto

It has these top-level messages:
	AccountRequest
	AccountReply
	MultiAccountRequest
	MapAccountReply
	PageSsoRequest
	PageSsoReply
	MSsoInfo
	SsoRequest
	AgentInfo
	SsoReply
	MultiSsoRequest
	MapSsoReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the account's id etcd.
type AccountRequest struct {
	Uid             int32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Username        string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password        string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Salt            string `protobuf:"bytes,4,opt,name=salt" json:"salt,omitempty"`
	State           int32  `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	Email           string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	Phone           string `protobuf:"bytes,7,opt,name=phone" json:"phone,omitempty"`
	Nickname        string `protobuf:"bytes,8,opt,name=nickname" json:"nickname,omitempty"`
	Realname        string `protobuf:"bytes,9,opt,name=realname" json:"realname,omitempty"`
	IsCertification int32  `protobuf:"varint,10,opt,name=isCertification" json:"isCertification,omitempty"`
	IdentityCard    string `protobuf:"bytes,11,opt,name=identityCard" json:"identityCard,omitempty"`
	Gender          int32  `protobuf:"varint,12,opt,name=gender" json:"gender,omitempty"`
	Birthday        int64  `protobuf:"varint,13,opt,name=birthday" json:"birthday,omitempty"`
	Avatar          int32  `protobuf:"varint,14,opt,name=avatar" json:"avatar,omitempty"`
	Province        string `protobuf:"bytes,15,opt,name=province" json:"province,omitempty"`
	City            string `protobuf:"bytes,16,opt,name=city" json:"city,omitempty"`
	Signature       string `protobuf:"bytes,17,opt,name=signature" json:"signature,omitempty"`
	RegIp           int64  `protobuf:"varint,18,opt,name=regIp" json:"regIp,omitempty"`
	UserAddress     string `protobuf:"bytes,19,opt,name=userAddress" json:"userAddress,omitempty"`
	UserJobId       int32  `protobuf:"varint,20,opt,name=userJobId" json:"userJobId,omitempty"`
	CreditValues    int32  `protobuf:"varint,21,opt,name=creditValues" json:"creditValues,omitempty"`
	UserPoint       int32  `protobuf:"varint,22,opt,name=userPoint" json:"userPoint,omitempty"`
	UserGradeId     int32  `protobuf:"varint,23,opt,name=userGradeId" json:"userGradeId,omitempty"`
	LastLoginIp     int64  `protobuf:"varint,24,opt,name=lastLoginIp" json:"lastLoginIp,omitempty"`
	IsFirstLogin    int32  `protobuf:"varint,25,opt,name=isFirstLogin" json:"isFirstLogin,omitempty"`
	Source          string `protobuf:"bytes,26,opt,name=source" json:"source,omitempty"`
}

func (m *AccountRequest) Reset()                    { *m = AccountRequest{} }
func (m *AccountRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()               {}
func (*AccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AccountRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AccountRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AccountRequest) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *AccountRequest) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *AccountRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *AccountRequest) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AccountRequest) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *AccountRequest) GetIsCertification() int32 {
	if m != nil {
		return m.IsCertification
	}
	return 0
}

func (m *AccountRequest) GetIdentityCard() string {
	if m != nil {
		return m.IdentityCard
	}
	return ""
}

func (m *AccountRequest) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *AccountRequest) GetBirthday() int64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *AccountRequest) GetAvatar() int32 {
	if m != nil {
		return m.Avatar
	}
	return 0
}

func (m *AccountRequest) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *AccountRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *AccountRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *AccountRequest) GetRegIp() int64 {
	if m != nil {
		return m.RegIp
	}
	return 0
}

func (m *AccountRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *AccountRequest) GetUserJobId() int32 {
	if m != nil {
		return m.UserJobId
	}
	return 0
}

func (m *AccountRequest) GetCreditValues() int32 {
	if m != nil {
		return m.CreditValues
	}
	return 0
}

func (m *AccountRequest) GetUserPoint() int32 {
	if m != nil {
		return m.UserPoint
	}
	return 0
}

func (m *AccountRequest) GetUserGradeId() int32 {
	if m != nil {
		return m.UserGradeId
	}
	return 0
}

func (m *AccountRequest) GetLastLoginIp() int64 {
	if m != nil {
		return m.LastLoginIp
	}
	return 0
}

func (m *AccountRequest) GetIsFirstLogin() int32 {
	if m != nil {
		return m.IsFirstLogin
	}
	return 0
}

func (m *AccountRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// The response message containing the id
type AccountReply struct {
	Uid             int32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Username        string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Email           string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone           string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	State           int32  `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	LastLoginTime   int64  `protobuf:"varint,6,opt,name=lastLoginTime" json:"lastLoginTime,omitempty"`
	CreateTime      int64  `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	Nickname        string `protobuf:"bytes,8,opt,name=nickname" json:"nickname,omitempty"`
	Realname        string `protobuf:"bytes,9,opt,name=realname" json:"realname,omitempty"`
	IsCertification int32  `protobuf:"varint,10,opt,name=isCertification" json:"isCertification,omitempty"`
	IdentityCard    string `protobuf:"bytes,11,opt,name=identityCard" json:"identityCard,omitempty"`
	ErrorCode       int32  `protobuf:"varint,12,opt,name=errorCode" json:"errorCode,omitempty"`
	Gender          int32  `protobuf:"varint,13,opt,name=gender" json:"gender,omitempty"`
	Birthday        int64  `protobuf:"varint,14,opt,name=birthday" json:"birthday,omitempty"`
	Avatar          int32  `protobuf:"varint,15,opt,name=avatar" json:"avatar,omitempty"`
	Province        string `protobuf:"bytes,16,opt,name=province" json:"province,omitempty"`
	City            string `protobuf:"bytes,17,opt,name=city" json:"city,omitempty"`
	Signature       string `protobuf:"bytes,18,opt,name=signature" json:"signature,omitempty"`
	UserAddress     string `protobuf:"bytes,19,opt,name=userAddress" json:"userAddress,omitempty"`
	UserJobId       int32  `protobuf:"varint,20,opt,name=userJobId" json:"userJobId,omitempty"`
	CreditValues    int32  `protobuf:"varint,21,opt,name=creditValues" json:"creditValues,omitempty"`
	UserPoint       int32  `protobuf:"varint,22,opt,name=userPoint" json:"userPoint,omitempty"`
	UserGradeId     int32  `protobuf:"varint,23,opt,name=userGradeId" json:"userGradeId,omitempty"`
	RegTime         int64  `protobuf:"varint,24,opt,name=regTime" json:"regTime,omitempty"`
	RegIp           int64  `protobuf:"varint,25,opt,name=regIp" json:"regIp,omitempty"`
	LastLoginIp     int64  `protobuf:"varint,26,opt,name=lastLoginIp" json:"lastLoginIp,omitempty"`
	LastActive      int64  `protobuf:"varint,27,opt,name=lastActive" json:"lastActive,omitempty"`
	UserModify      int64  `protobuf:"varint,28,opt,name=userModify" json:"userModify,omitempty"`
	IsFirstLogin    int32  `protobuf:"varint,29,opt,name=isFirstLogin" json:"isFirstLogin,omitempty"`
}

func (m *AccountReply) Reset()                    { *m = AccountReply{} }
func (m *AccountReply) String() string            { return proto.CompactTextString(m) }
func (*AccountReply) ProtoMessage()               {}
func (*AccountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountReply) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AccountReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AccountReply) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountReply) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *AccountReply) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *AccountReply) GetLastLoginTime() int64 {
	if m != nil {
		return m.LastLoginTime
	}
	return 0
}

func (m *AccountReply) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *AccountReply) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AccountReply) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *AccountReply) GetIsCertification() int32 {
	if m != nil {
		return m.IsCertification
	}
	return 0
}

func (m *AccountReply) GetIdentityCard() string {
	if m != nil {
		return m.IdentityCard
	}
	return ""
}

func (m *AccountReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *AccountReply) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *AccountReply) GetBirthday() int64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *AccountReply) GetAvatar() int32 {
	if m != nil {
		return m.Avatar
	}
	return 0
}

func (m *AccountReply) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *AccountReply) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *AccountReply) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *AccountReply) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *AccountReply) GetUserJobId() int32 {
	if m != nil {
		return m.UserJobId
	}
	return 0
}

func (m *AccountReply) GetCreditValues() int32 {
	if m != nil {
		return m.CreditValues
	}
	return 0
}

func (m *AccountReply) GetUserPoint() int32 {
	if m != nil {
		return m.UserPoint
	}
	return 0
}

func (m *AccountReply) GetUserGradeId() int32 {
	if m != nil {
		return m.UserGradeId
	}
	return 0
}

func (m *AccountReply) GetRegTime() int64 {
	if m != nil {
		return m.RegTime
	}
	return 0
}

func (m *AccountReply) GetRegIp() int64 {
	if m != nil {
		return m.RegIp
	}
	return 0
}

func (m *AccountReply) GetLastLoginIp() int64 {
	if m != nil {
		return m.LastLoginIp
	}
	return 0
}

func (m *AccountReply) GetLastActive() int64 {
	if m != nil {
		return m.LastActive
	}
	return 0
}

func (m *AccountReply) GetUserModify() int64 {
	if m != nil {
		return m.UserModify
	}
	return 0
}

func (m *AccountReply) GetIsFirstLogin() int32 {
	if m != nil {
		return m.IsFirstLogin
	}
	return 0
}

type MultiAccountRequest struct {
	Accounts map[int32]*AccountRequest `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Source   string                    `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *MultiAccountRequest) Reset()                    { *m = MultiAccountRequest{} }
func (m *MultiAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*MultiAccountRequest) ProtoMessage()               {}
func (*MultiAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MultiAccountRequest) GetAccounts() map[int32]*AccountRequest {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *MultiAccountRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type MapAccountReply struct {
	Accounts  map[int32]*AccountReply `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ErrorCode int32                   `protobuf:"varint,2,opt,name=errorCode" json:"errorCode,omitempty"`
}

func (m *MapAccountReply) Reset()                    { *m = MapAccountReply{} }
func (m *MapAccountReply) String() string            { return proto.CompactTextString(m) }
func (*MapAccountReply) ProtoMessage()               {}
func (*MapAccountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MapAccountReply) GetAccounts() map[int32]*AccountReply {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *MapAccountReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*AccountRequest)(nil), "pb.AccountRequest")
	proto.RegisterType((*AccountReply)(nil), "pb.AccountReply")
	proto.RegisterType((*MultiAccountRequest)(nil), "pb.MultiAccountRequest")
	proto.RegisterType((*MapAccountReply)(nil), "pb.MapAccountReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Account service

type AccountClient interface {
	UpdateExInfo(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	Show(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	GetUserInfoById(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	GetUserInfoAll(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	UpdateAccountInfo(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	UpdateCertification(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	GetCertification(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	UpdateUserValues(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	GetUserValues(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	GetBatchAccountInfo(ctx context.Context, in *MultiAccountRequest, opts ...grpc.CallOption) (*MapAccountReply, error)
	GetBatchExInfo(ctx context.Context, in *MultiAccountRequest, opts ...grpc.CallOption) (*MapAccountReply, error)
	GetBatchAllUserInfo(ctx context.Context, in *MultiAccountRequest, opts ...grpc.CallOption) (*MapAccountReply, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) UpdateExInfo(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/UpdateExInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Show(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/Show", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetUserInfoById(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/GetUserInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetUserInfoAll(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/GetUserInfoAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateAccountInfo(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/UpdateAccountInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateCertification(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/UpdateCertification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetCertification(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/GetCertification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateUserValues(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/UpdateUserValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetUserValues(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/GetUserValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetBatchAccountInfo(ctx context.Context, in *MultiAccountRequest, opts ...grpc.CallOption) (*MapAccountReply, error) {
	out := new(MapAccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/GetBatchAccountInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetBatchExInfo(ctx context.Context, in *MultiAccountRequest, opts ...grpc.CallOption) (*MapAccountReply, error) {
	out := new(MapAccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/GetBatchExInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetBatchAllUserInfo(ctx context.Context, in *MultiAccountRequest, opts ...grpc.CallOption) (*MapAccountReply, error) {
	out := new(MapAccountReply)
	err := grpc.Invoke(ctx, "/pb.Account/GetBatchAllUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountServer interface {
	UpdateExInfo(context.Context, *AccountRequest) (*AccountReply, error)
	Show(context.Context, *AccountRequest) (*AccountReply, error)
	GetUserInfoById(context.Context, *AccountRequest) (*AccountReply, error)
	GetUserInfoAll(context.Context, *AccountRequest) (*AccountReply, error)
	UpdateAccountInfo(context.Context, *AccountRequest) (*AccountReply, error)
	UpdateCertification(context.Context, *AccountRequest) (*AccountReply, error)
	GetCertification(context.Context, *AccountRequest) (*AccountReply, error)
	UpdateUserValues(context.Context, *AccountRequest) (*AccountReply, error)
	GetUserValues(context.Context, *AccountRequest) (*AccountReply, error)
	GetBatchAccountInfo(context.Context, *MultiAccountRequest) (*MapAccountReply, error)
	GetBatchExInfo(context.Context, *MultiAccountRequest) (*MapAccountReply, error)
	GetBatchAllUserInfo(context.Context, *MultiAccountRequest) (*MapAccountReply, error)
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)
}

func _Account_UpdateExInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateExInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/UpdateExInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateExInfo(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Show(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetUserInfoById(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetUserInfoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetUserInfoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetUserInfoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetUserInfoAll(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/UpdateAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateAccountInfo(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/UpdateCertification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateCertification(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetCertification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetCertification(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateUserValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateUserValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/UpdateUserValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateUserValues(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetUserValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetUserValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetUserValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetUserValues(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetBatchAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetBatchAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetBatchAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetBatchAccountInfo(ctx, req.(*MultiAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetBatchExInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetBatchExInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetBatchExInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetBatchExInfo(ctx, req.(*MultiAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetBatchAllUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetBatchAllUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetBatchAllUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetBatchAllUserInfo(ctx, req.(*MultiAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateExInfo",
			Handler:    _Account_UpdateExInfo_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Account_Show_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _Account_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetUserInfoAll",
			Handler:    _Account_GetUserInfoAll_Handler,
		},
		{
			MethodName: "UpdateAccountInfo",
			Handler:    _Account_UpdateAccountInfo_Handler,
		},
		{
			MethodName: "UpdateCertification",
			Handler:    _Account_UpdateCertification_Handler,
		},
		{
			MethodName: "GetCertification",
			Handler:    _Account_GetCertification_Handler,
		},
		{
			MethodName: "UpdateUserValues",
			Handler:    _Account_UpdateUserValues_Handler,
		},
		{
			MethodName: "GetUserValues",
			Handler:    _Account_GetUserValues_Handler,
		},
		{
			MethodName: "GetBatchAccountInfo",
			Handler:    _Account_GetBatchAccountInfo_Handler,
		},
		{
			MethodName: "GetBatchExInfo",
			Handler:    _Account_GetBatchExInfo_Handler,
		},
		{
			MethodName: "GetBatchAllUserInfo",
			Handler:    _Account_GetBatchAllUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/account.proto",
}

func init() { proto.RegisterFile("pb/account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 857 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x56, 0xdd, 0x6e, 0x23, 0x35,
	0x14, 0xde, 0x24, 0x4d, 0x7f, 0x4e, 0x9b, 0x26, 0x75, 0x96, 0x5d, 0x6f, 0x28, 0xab, 0x10, 0x01,
	0xca, 0x55, 0x90, 0x8a, 0x04, 0xcb, 0xa2, 0x95, 0xc8, 0x56, 0xa5, 0x0a, 0xa2, 0x02, 0x05, 0x96,
	0x7b, 0x67, 0x7c, 0x9a, 0x5a, 0x9d, 0x8e, 0x07, 0xdb, 0x93, 0x32, 0x0f, 0xc7, 0x05, 0xef, 0xc1,
	0x1d, 0x37, 0x3c, 0x06, 0xb2, 0x3d, 0x93, 0xcc, 0xe4, 0x47, 0x24, 0x5c, 0xc1, 0xdd, 0x7c, 0xdf,
	0xf9, 0xf1, 0x39, 0xc7, 0xe7, 0x73, 0x02, 0xad, 0x78, 0xf2, 0x29, 0x0b, 0x02, 0x99, 0x44, 0x66,
	0x10, 0x2b, 0x69, 0x24, 0xa9, 0xc6, 0x93, 0xde, 0x5f, 0x75, 0x38, 0x1d, 0x7a, 0x76, 0x8c, 0xbf,
	0x24, 0xa8, 0x0d, 0x69, 0x41, 0x2d, 0x11, 0x9c, 0x56, 0xba, 0x95, 0x7e, 0x7d, 0x6c, 0x3f, 0x49,
	0x07, 0x0e, 0x13, 0x8d, 0x2a, 0x62, 0x0f, 0x48, 0xab, 0xdd, 0x4a, 0xff, 0x68, 0x3c, 0xc7, 0xd6,
	0x16, 0x33, 0xad, 0x1f, 0xa5, 0xe2, 0xb4, 0xe6, 0x6d, 0x39, 0x26, 0x04, 0xf6, 0x34, 0x0b, 0x0d,
	0xdd, 0x73, 0xbc, 0xfb, 0x26, 0x4f, 0xa1, 0xae, 0x0d, 0x33, 0x48, 0xeb, 0x2e, 0xbf, 0x07, 0x96,
	0xc5, 0x07, 0x26, 0x42, 0xba, 0xef, 0x5c, 0x3d, 0xb0, 0x6c, 0x7c, 0x27, 0x23, 0xa4, 0x07, 0x9e,
	0x75, 0xc0, 0x9e, 0x18, 0x89, 0xe0, 0xde, 0x55, 0x73, 0xe8, 0x4f, 0xcc, 0xb1, 0xb5, 0x29, 0x64,
	0xa1, 0xb3, 0x1d, 0x79, 0x5b, 0x8e, 0x49, 0x1f, 0x9a, 0x42, 0x5f, 0xa2, 0x32, 0xe2, 0x56, 0x04,
	0xcc, 0x08, 0x19, 0x51, 0x70, 0x35, 0x2c, 0xd3, 0xa4, 0x07, 0x27, 0x82, 0x63, 0x64, 0x84, 0x49,
	0x2f, 0x99, 0xe2, 0xf4, 0xd8, 0x65, 0x2a, 0x71, 0xe4, 0x19, 0xec, 0x4f, 0x31, 0xe2, 0xa8, 0xe8,
	0x89, 0x4b, 0x92, 0x21, 0x5b, 0xc1, 0x44, 0x28, 0x73, 0xc7, 0x59, 0x4a, 0x1b, 0xdd, 0x4a, 0xbf,
	0x36, 0x9e, 0x63, 0x1b, 0xc3, 0x66, 0xcc, 0x30, 0x45, 0x4f, 0x7d, 0x8c, 0x47, 0x6e, 0x86, 0x4a,
	0xce, 0x44, 0x14, 0x20, 0x6d, 0x66, 0x33, 0xcc, 0xb0, 0x9d, 0x61, 0x20, 0x4c, 0x4a, 0x5b, 0x7e,
	0x86, 0xf6, 0x9b, 0x9c, 0xc3, 0x91, 0x16, 0xd3, 0x88, 0x99, 0x44, 0x21, 0x3d, 0x73, 0x86, 0x05,
	0x61, 0xa7, 0xa6, 0x70, 0x3a, 0x8a, 0x29, 0x71, 0xc7, 0x7b, 0x40, 0xba, 0x70, 0x6c, 0xef, 0x6c,
	0xc8, 0xb9, 0x42, 0xad, 0x69, 0xdb, 0x45, 0x15, 0x29, 0x9b, 0xd5, 0xc2, 0x6f, 0xe5, 0x64, 0xc4,
	0xe9, 0x53, 0x57, 0xe0, 0x82, 0xb0, 0x33, 0x09, 0x14, 0x72, 0x61, 0x7e, 0x66, 0x61, 0x82, 0x9a,
	0xbe, 0xe7, 0x1c, 0x4a, 0x5c, 0x9e, 0xe1, 0x07, 0x29, 0x22, 0x43, 0x9f, 0x2d, 0x32, 0x38, 0x22,
	0xaf, 0xe0, 0x5a, 0x31, 0x8e, 0x23, 0x4e, 0x9f, 0x3b, 0x7b, 0x91, 0xb2, 0x1e, 0x21, 0xd3, 0xe6,
	0x3b, 0x39, 0x15, 0xd1, 0x28, 0xa6, 0xd4, 0xd5, 0x5f, 0xa4, 0xdc, 0xcd, 0xe8, 0x6f, 0x84, 0xca,
	0x18, 0xfa, 0xc2, 0x57, 0x51, 0xe4, 0xec, 0x94, 0xb5, 0x4c, 0x54, 0x80, 0xb4, 0xe3, 0x9a, 0xcc,
	0x50, 0xef, 0x8f, 0x7d, 0x38, 0x99, 0xaf, 0x7a, 0x1c, 0xa6, 0x3b, 0x2e, 0xfa, 0x7c, 0x45, 0x6b,
	0x6b, 0x57, 0x74, 0xaf, 0xb8, 0xa2, 0xeb, 0x97, 0xfc, 0x23, 0x68, 0xcc, 0x7b, 0xf9, 0x49, 0x3c,
	0xa0, 0x5b, 0xf6, 0xda, 0xb8, 0x4c, 0x92, 0x97, 0x00, 0x81, 0x42, 0x66, 0xd0, 0xb9, 0x1c, 0x38,
	0x97, 0x02, 0xf3, 0x1f, 0x59, 0xff, 0x73, 0x38, 0x42, 0xa5, 0xa4, 0xba, 0x94, 0x1c, 0x33, 0x05,
	0x2c, 0x88, 0x82, 0x38, 0x1a, 0x1b, 0xc5, 0x71, 0xba, 0x51, 0x1c, 0xcd, 0x8d, 0xe2, 0x68, 0x6d,
	0x10, 0xc7, 0xd9, 0x26, 0x71, 0x90, 0x65, 0x71, 0xfc, 0x1f, 0x64, 0x40, 0xe1, 0x40, 0xe1, 0xd4,
	0x5d, 0xbf, 0x97, 0x40, 0x0e, 0x17, 0xd2, 0x7e, 0xb1, 0x24, 0xed, 0xa2, 0x6c, 0x3a, 0xab, 0xb2,
	0x79, 0x09, 0x60, 0xe1, 0x30, 0x30, 0x62, 0x86, 0xf4, 0x7d, 0xbf, 0x53, 0x0b, 0xc6, 0xda, 0x6d,
	0x01, 0x37, 0x92, 0x8b, 0xdb, 0x94, 0x9e, 0x7b, 0xfb, 0x82, 0x59, 0x91, 0xdd, 0x07, 0xab, 0xb2,
	0xeb, 0xfd, 0x5e, 0x81, 0xf6, 0x4d, 0x12, 0x1a, 0xb1, 0xf4, 0x73, 0x32, 0x84, 0xc3, 0xec, 0x67,
	0x47, 0xd3, 0x4a, 0xb7, 0xd6, 0x3f, 0xbe, 0xf8, 0x78, 0x10, 0x4f, 0x06, 0x6b, 0x5c, 0x07, 0x19,
	0xd4, 0x57, 0x91, 0x51, 0xe9, 0x78, 0x1e, 0x56, 0x50, 0x74, 0xb5, 0xa8, 0xe8, 0xce, 0xf7, 0xd0,
	0x28, 0x85, 0x58, 0x45, 0xdf, 0x63, 0x9a, 0x2b, 0xfa, 0x1e, 0x53, 0xd2, 0x87, 0xfa, 0xcc, 0xde,
	0x8a, 0x8b, 0x3c, 0xbe, 0x20, 0xf6, 0xe8, 0xf2, 0xa9, 0x63, 0xef, 0xf0, 0xba, 0xfa, 0xaa, 0xd2,
	0xfb, 0xad, 0x02, 0xcd, 0x1b, 0x16, 0x97, 0x5e, 0x89, 0x37, 0x2b, 0xf5, 0x7f, 0xe8, 0xea, 0x2f,
	0xbb, 0x6d, 0xac, 0xbd, 0x24, 0x94, 0xea, 0x92, 0x50, 0x3a, 0x37, 0xff, 0xdc, 0xc1, 0x27, 0xe5,
	0x0e, 0x5a, 0xa5, 0x0e, 0xe2, 0x30, 0x2d, 0xd4, 0x7f, 0xf1, 0x67, 0x1d, 0x0e, 0x32, 0x1b, 0xf9,
	0x1c, 0x4e, 0xde, 0xc5, 0x9c, 0x19, 0xbc, 0xfa, 0x75, 0x14, 0xdd, 0x4a, 0xb2, 0xa6, 0xf5, 0xce,
	0x4a, 0xb2, 0xde, 0x13, 0x32, 0x80, 0xbd, 0x1f, 0xef, 0xe4, 0xe3, 0xd6, 0xfe, 0x5f, 0x42, 0xf3,
	0x1a, 0xcd, 0x3b, 0x8d, 0xca, 0x1e, 0xf3, 0x36, 0x1d, 0xf1, 0xad, 0x43, 0x5f, 0xc1, 0x69, 0x21,
	0x74, 0x18, 0x86, 0x5b, 0x47, 0x7e, 0x05, 0x67, 0xbe, 0xb9, 0x8c, 0xdf, 0xa9, 0xc3, 0x37, 0xd0,
	0xf6, 0xc1, 0xe5, 0x67, 0x6f, 0xdb, 0xf0, 0xd7, 0xd0, 0xba, 0x46, 0xf3, 0xaf, 0x63, 0xfd, 0xd1,
	0xb6, 0xe9, 0xec, 0xb9, 0xd8, 0x36, 0xf6, 0x0b, 0x68, 0x64, 0xd3, 0xda, 0x31, 0xf0, 0x0a, 0xda,
	0xd7, 0x68, 0xde, 0x32, 0x13, 0xdc, 0x15, 0xc7, 0xf5, 0x7c, 0x83, 0x0c, 0x3b, 0xed, 0x35, 0xfb,
	0xdd, 0x7b, 0x42, 0xbe, 0x76, 0xb7, 0xe5, 0xd2, 0x64, 0x2b, 0xb5, 0x6b, 0x86, 0x62, 0x21, 0x61,
	0x98, 0xdf, 0xfb, 0xae, 0x69, 0x26, 0xfb, 0xee, 0xef, 0xeb, 0x67, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x0f, 0xe9, 0xa9, 0xb0, 0xd2, 0x0a, 0x00, 0x00,
}
