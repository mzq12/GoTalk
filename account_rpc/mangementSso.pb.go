// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/mangementSso.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PageSsoRequest struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Page   int32  `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	Count  int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Order  string `protobuf:"bytes,4,opt,name=order" json:"order,omitempty"`
	Token  string `protobuf:"bytes,5,opt,name=token" json:"token,omitempty"`
}

func (m *PageSsoRequest) Reset()                    { *m = PageSsoRequest{} }
func (m *PageSsoRequest) String() string            { return proto.CompactTextString(m) }
func (*PageSsoRequest) ProtoMessage()               {}
func (*PageSsoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PageSsoRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PageSsoRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PageSsoRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PageSsoRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *PageSsoRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type PageSsoReply struct {
	MSsos      []*MSsoInfo `protobuf:"bytes,1,rep,name=mSsos" json:"mSsos,omitempty"`
	Code       int32       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	TotalCount int32       `protobuf:"varint,3,opt,name=totalCount" json:"totalCount,omitempty"`
}

func (m *PageSsoReply) Reset()                    { *m = PageSsoReply{} }
func (m *PageSsoReply) String() string            { return proto.CompactTextString(m) }
func (*PageSsoReply) ProtoMessage()               {}
func (*PageSsoReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PageSsoReply) GetMSsos() []*MSsoInfo {
	if m != nil {
		return m.MSsos
	}
	return nil
}

func (m *PageSsoReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PageSsoReply) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type MSsoInfo struct {
	Uid        int32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Username   string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Nickname   string `protobuf:"bytes,3,opt,name=nickname" json:"nickname,omitempty"`
	LoginState int32  `protobuf:"varint,4,opt,name=loginState" json:"loginState,omitempty"`
	State      int32  `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	RegTime    int64  `protobuf:"varint,6,opt,name=regTime" json:"regTime,omitempty"`
	RegIP      string `protobuf:"bytes,7,opt,name=regIP" json:"regIP,omitempty"`
	RegAddr    string `protobuf:"bytes,8,opt,name=regAddr" json:"regAddr,omitempty"`
	LoginTime  int64  `protobuf:"varint,9,opt,name=loginTime" json:"loginTime,omitempty"`
	QuitTime   int64  `protobuf:"varint,10,opt,name=quitTime" json:"quitTime,omitempty"`
	NewIP      string `protobuf:"bytes,11,opt,name=newIP" json:"newIP,omitempty"`
	NewAddr    string `protobuf:"bytes,12,opt,name=newAddr" json:"newAddr,omitempty"`
	Token      string `protobuf:"bytes,13,opt,name=token" json:"token,omitempty"`
	DevInfo    string `protobuf:"bytes,14,opt,name=devInfo" json:"devInfo,omitempty"`
	Code       int32  `protobuf:"varint,15,opt,name=code" json:"code,omitempty"`
	Source     string `protobuf:"bytes,16,opt,name=source" json:"source,omitempty"`
}

func (m *MSsoInfo) Reset()                    { *m = MSsoInfo{} }
func (m *MSsoInfo) String() string            { return proto.CompactTextString(m) }
func (*MSsoInfo) ProtoMessage()               {}
func (*MSsoInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *MSsoInfo) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *MSsoInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MSsoInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *MSsoInfo) GetLoginState() int32 {
	if m != nil {
		return m.LoginState
	}
	return 0
}

func (m *MSsoInfo) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MSsoInfo) GetRegTime() int64 {
	if m != nil {
		return m.RegTime
	}
	return 0
}

func (m *MSsoInfo) GetRegIP() string {
	if m != nil {
		return m.RegIP
	}
	return ""
}

func (m *MSsoInfo) GetRegAddr() string {
	if m != nil {
		return m.RegAddr
	}
	return ""
}

func (m *MSsoInfo) GetLoginTime() int64 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

func (m *MSsoInfo) GetQuitTime() int64 {
	if m != nil {
		return m.QuitTime
	}
	return 0
}

func (m *MSsoInfo) GetNewIP() string {
	if m != nil {
		return m.NewIP
	}
	return ""
}

func (m *MSsoInfo) GetNewAddr() string {
	if m != nil {
		return m.NewAddr
	}
	return ""
}

func (m *MSsoInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MSsoInfo) GetDevInfo() string {
	if m != nil {
		return m.DevInfo
	}
	return ""
}

func (m *MSsoInfo) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MSsoInfo) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func init() {
	proto.RegisterType((*PageSsoRequest)(nil), "pb.PageSsoRequest")
	proto.RegisterType((*PageSsoReply)(nil), "pb.PageSsoReply")
	proto.RegisterType((*MSsoInfo)(nil), "pb.MSsoInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MSso service

type MSsoClient interface {
	GetPageSsoInfos(ctx context.Context, in *PageSsoRequest, opts ...grpc.CallOption) (*PageSsoReply, error)
	SearchSsoInfo(ctx context.Context, in *MSsoInfo, opts ...grpc.CallOption) (*MSsoInfo, error)
}

type mSsoClient struct {
	cc *grpc.ClientConn
}

func NewMSsoClient(cc *grpc.ClientConn) MSsoClient {
	return &mSsoClient{cc}
}

func (c *mSsoClient) GetPageSsoInfos(ctx context.Context, in *PageSsoRequest, opts ...grpc.CallOption) (*PageSsoReply, error) {
	out := new(PageSsoReply)
	err := grpc.Invoke(ctx, "/pb.MSso/GetPageSsoInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSsoClient) SearchSsoInfo(ctx context.Context, in *MSsoInfo, opts ...grpc.CallOption) (*MSsoInfo, error) {
	out := new(MSsoInfo)
	err := grpc.Invoke(ctx, "/pb.MSso/SearchSsoInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MSso service

type MSsoServer interface {
	GetPageSsoInfos(context.Context, *PageSsoRequest) (*PageSsoReply, error)
	SearchSsoInfo(context.Context, *MSsoInfo) (*MSsoInfo, error)
}

func RegisterMSsoServer(s *grpc.Server, srv MSsoServer) {
	s.RegisterService(&_MSso_serviceDesc, srv)
}

func _MSso_GetPageSsoInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageSsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSsoServer).GetPageSsoInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MSso/GetPageSsoInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSsoServer).GetPageSsoInfos(ctx, req.(*PageSsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSso_SearchSsoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSsoInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSsoServer).SearchSsoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MSso/SearchSsoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSsoServer).SearchSsoInfo(ctx, req.(*MSsoInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _MSso_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MSso",
	HandlerType: (*MSsoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageSsoInfos",
			Handler:    _MSso_GetPageSsoInfos_Handler,
		},
		{
			MethodName: "SearchSsoInfo",
			Handler:    _MSso_SearchSsoInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/mangementSso.proto",
}

func init() { proto.RegisterFile("pb/mangementSso.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x93, 0xc1, 0x6e, 0xdb, 0x30,
	0x0c, 0x86, 0xeb, 0x3a, 0x4e, 0x13, 0x36, 0x6d, 0x03, 0x61, 0x1b, 0x84, 0x60, 0x18, 0x02, 0x9f,
	0x72, 0x59, 0x06, 0x74, 0xa7, 0x1d, 0x87, 0x1d, 0x86, 0x1c, 0x06, 0x04, 0xf6, 0x5e, 0xc0, 0xb1,
	0x59, 0xcf, 0x68, 0x2c, 0xb9, 0x92, 0xbc, 0x22, 0x97, 0x3d, 0xc8, 0x9e, 0xb6, 0x20, 0x65, 0x3b,
	0xce, 0x4d, 0xdf, 0x4f, 0x82, 0x3f, 0x25, 0x52, 0xf0, 0xbe, 0x39, 0x7c, 0xa9, 0x33, 0x55, 0x62,
	0x8d, 0xca, 0xa5, 0x56, 0x6f, 0x1b, 0xa3, 0x9d, 0x16, 0xd7, 0xcd, 0x21, 0xfe, 0x07, 0xf7, 0xfb,
	0xac, 0xc4, 0xd4, 0xea, 0x04, 0x5f, 0x5a, 0xb4, 0x4e, 0x7c, 0x80, 0xa9, 0xd5, 0xad, 0xc9, 0x51,
	0x06, 0xeb, 0x60, 0x33, 0x4f, 0x3a, 0x12, 0x02, 0x26, 0x4d, 0x56, 0xa2, 0xbc, 0x5e, 0x07, 0x9b,
	0x28, 0xe1, 0xb3, 0x78, 0x07, 0x51, 0xae, 0x5b, 0xe5, 0x64, 0xc8, 0xa2, 0x07, 0x52, 0xb5, 0x29,
	0xd0, 0xc8, 0x09, 0x17, 0xf0, 0x40, 0xaa, 0xd3, 0xcf, 0xa8, 0x64, 0xe4, 0x55, 0x86, 0xf8, 0x09,
	0x16, 0x83, 0x7f, 0x73, 0x3c, 0x89, 0x18, 0xa2, 0x3a, 0xb5, 0xda, 0xca, 0x60, 0x1d, 0x6e, 0x6e,
	0x1f, 0x17, 0xdb, 0xe6, 0xb0, 0xfd, 0x95, 0x5a, 0xbd, 0x53, 0x4f, 0x3a, 0xf1, 0x21, 0xea, 0x24,
	0xd7, 0xc5, 0xd0, 0x09, 0x9d, 0xc5, 0x27, 0x00, 0xa7, 0x5d, 0x76, 0xfc, 0x31, 0x6a, 0x67, 0xa4,
	0xc4, 0xff, 0x43, 0x98, 0xf5, 0x75, 0xc4, 0x12, 0xc2, 0xb6, 0x2a, 0xf8, 0x7e, 0x51, 0x42, 0x47,
	0xb1, 0x82, 0x59, 0x6b, 0xd1, 0xa8, 0xac, 0xf6, 0x65, 0xe7, 0xc9, 0xc0, 0x14, 0x53, 0x55, 0xfe,
	0xcc, 0xb1, 0xd0, 0xc7, 0x7a, 0x26, 0xdb, 0xa3, 0x2e, 0x2b, 0x95, 0xba, 0xcc, 0x21, 0xdf, 0x37,
	0x4a, 0x46, 0x0a, 0x5d, 0xda, 0x72, 0x28, 0xf2, 0x0f, 0xc4, 0x20, 0x24, 0xdc, 0x18, 0x2c, 0x7f,
	0x57, 0x35, 0xca, 0xe9, 0x3a, 0xd8, 0x84, 0x49, 0x8f, 0x94, 0x6f, 0xb0, 0xdc, 0xed, 0xe5, 0x8d,
	0x7f, 0x24, 0x86, 0x2e, 0xff, 0x7b, 0x51, 0x18, 0x39, 0x63, 0xbd, 0x47, 0xf1, 0x11, 0xe6, 0xec,
	0xc6, 0xb5, 0xe6, 0x5c, 0xeb, 0x2c, 0x50, 0xe7, 0x2f, 0x6d, 0xe5, 0x38, 0x08, 0x1c, 0x1c, 0x98,
	0x9c, 0x14, 0xbe, 0xee, 0xf6, 0xf2, 0xd6, 0x3b, 0x31, 0x90, 0x93, 0xc2, 0x57, 0x76, 0x5a, 0x78,
	0xa7, 0x0e, 0xcf, 0xe3, 0xbb, 0x1b, 0x8d, 0x8f, 0xf2, 0x0b, 0xfc, 0x4b, 0x8f, 0x2a, 0xef, 0x7d,
	0x7e, 0x87, 0xc3, 0x90, 0x1e, 0x46, 0x43, 0x3a, 0xaf, 0xd6, 0x72, 0xbc, 0x5a, 0x8f, 0x0d, 0x4c,
	0x68, 0x36, 0xe2, 0x1b, 0x3c, 0xfc, 0x44, 0xd7, 0xed, 0x03, 0x55, 0xb1, 0x42, 0xd0, 0x02, 0x5c,
	0x6e, 0xe8, 0x6a, 0x79, 0xa1, 0x35, 0xc7, 0x53, 0x7c, 0x25, 0x3e, 0xc3, 0x5d, 0x8a, 0x99, 0xc9,
	0xff, 0xf4, 0x33, 0xbe, 0xd8, 0x9c, 0xd5, 0x05, 0xc5, 0x57, 0x87, 0x29, 0xff, 0x80, 0xaf, 0x6f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xb6, 0x97, 0xeb, 0x1a, 0x03, 0x00, 0x00,
}
